RewriteEngine On
    RewriteCond %{REQUEST_URI} !^/public_html/
    RewriteRule ^(.*)$ /public_html/$1 [L]
    ```

* **URLs amigáveis (URL Rewriting):**
    * Se você estiver usando um framework MVC, pode precisar reescrever URLs:

```apacheconf
    RewriteEngine On
    RewriteBase /public_html/
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule ^(.*)$ index.php/$1 [L]
    ```

* **Prevenção de acesso direto a arquivos:**
    * Proteja seus arquivos PHP sensíveis:

```apacheconf
    <Files ~ "\.php$">
    Order allow,deny
    Deny from all
    </Files>
    <Files index.php>
    Order allow,deny
    Allow from all
    </Files>
    ```

* **Configurações de PHP:**
    * Você pode ajustar configurações do PHP:

```apacheconf
    php_value upload_max_filesize 10M
    php_value post_max_size 10M
    ```

* **Cache de arquivos:**
    * Para um melhor desempenho do site.

```apacheconf
    <filesMatch ".(ico|pdf|flv|jpg|jpeg|png|gif|svg|swf|css|js)$">
    Header set Cache-Control "max-age=604800, public"
    </filesMatch>
    ```

**Considerações:**

* Teste seu `.htaccess` cuidadosamente, pois erros podem causar problemas no site.
* A Hostinger oferece suporte para `.htaccess`, mas verifique a documentação deles para detalhes específicos.
* Mantenha seu código php, e outras linguagens que não devem ser acessadas diretamente fora da pasta public_html.

Seguindo essas diretrizes, você terá um projeto PHP bem organizado e um arquivo `.htaccess` configurado de forma eficiente.